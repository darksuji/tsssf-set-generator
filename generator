#!/usr/bin/env perl
use MooseX::Declare;
use Moose::Util::TypeConstraints;

BEGIN {
    subtype 'TSSSF::SetName',
        as 'Str', where { /^[-a-zA-Z0-1]+$/ };
}

class TSSSF::Set {
    use File::Slurp qw/read_file/;

    has 'name' => (
        isa => 'TSSSF::SetName', is => 'ro', required => 1,
    );
    has 'cards' => (
        isa => 'ArrayRef[TSSSF::Card]', is => 'ro', required => 1,
        traits => ['Array'],
        handles => {
            all_cards       => 'elements',
            filter_cards    => 'grep',
        },
    );

    method load ($class: TSSSF::SetName $name) {
        my $filename = "data/$name.pon";
        return $class->parse($name, scalar read_file($filename));
    }

    method parse ($class: TSSSF::SetName $name, Str $str) {
        my @cards = map {
            TSSSF::Card->parse($_)
        } split /[\r\n]+/, $str;

        return $class->new(
            name    => $name,
            cards   => \@cards,
        );
    }

    method pick_subset (TSSSF::SetName $name, @card_names) {
        use List::Util qw/first/;

        my @cards = $self->filter_cards(
            sub {
                my $card = $_;
                return first { $card->name eq $_ } @card_names;
            }
        );

        return $self->new(
            name    => $name,
            cards   => \@cards,
        );
    }

    method as_string () {
        return join(
            "\n", map { $_->as_string } $self->all_cards,
        );
    }
}

subtype 'TSSSF::CardName',
    as 'Str', where { $_ !~ /\`/ };

class TSSSF::Card {
    has 'name' => (
        isa => 'TSSSF::CardName', is => 'ro', required => 1,
    );
    has 'string_rep' => (
        isa => 'Str', is => 'ro', required => 1,
    ),

    method parse ($class: Str $str) {
        my (
            undef, undef, undef, $name
        ) = split /\`/, $str;

        return $class->parse_special($str) unless defined $name;

        $name = $class->_encode_name($name);
        return $class->new(
            name        => $name,
            string_rep  => $str,
        );
    }

    method _encode_name ($class: Str $name) {
        return $name =~ s/\\n/ /r;
    }

    # some cards violate the file format and have to be constructed especially
    method parse_special ($class: Str $str) {
        if ($str eq 'Card`Card - Derpy Hooves.png`') {
            return $class->new(
                name        => 'Derpy Hooves',
                string_rep  => $str,
            );
        } else {
            die "Unknown card $str!";
        }
    }

    method as_string () {
        return $self->string_rep;
    }
}

use Mojolicious::Lite;

get '/' => sub {
    my ($c) = @_;

    my $card_set = TSSSF::Set->load('cards'); # FIXME: hard-coded and badly named
    $c->stash(card_names => [
        map { $_->name } $card_set->all_cards
    ]);

    $c->render('index');
};

post '/' => sub {
    my ($c) = @_;

    my $test = $c->param('sentience');
    die "Begone, non-sentient!" unless $test eq 'Pixel Prism';

    my @cards = $c->param('cards');
    my $card_set = TSSSF::Set->load('cards'); # FIXME: hard-coded and badly named
    my $subset = $card_set->pick_subset('output', @cards);

    $c->stash(subset_string => $subset->as_string);
    $c->render(inline => '<%= $subset_string %>');
};

app->start;
__DATA__

@@ index.html.ep
% layout 'default';
% title 'TSSSF Set Builder';
<form method="POST">
<ul>
% for my $name (@$card_names) {
    <li><input type="checkbox" name="cards" value="<%= $name %>"><%= $name %></li>
% }
</ul>
<label for="sentience test">Sentience test:  Who is best rainbow-puking dragicorn?</label>\
<input type="text" name="sentience" id="sentience test" size="20" value="">
<input type="submit">
</form>

@@ layouts/default.html.ep
<!DOCTYPE html>
<html>
  <head><title><%= title %></title></head>
  <body><%= content %></body>
</html>
